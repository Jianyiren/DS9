barplot(rbind(HealthResult$death,HealthResult$injury),main="Events damage Population Health",col=c("blue","red"),names.arg=c(HealthResult$type), beside = FALSE)
par(pin=c(5,2))
barplot(rbind(HealthResult$death,HealthResult$injury),main="Events damage Population Health",col=c("blue","red"),names.arg=c(HealthResult$type), beside = FALSE)
par(cex.axis=0.5)
par(cex.axis=0.5)
par(cex.axis=0.1)
axis(1,cex.axis=0.1)
axis(2,cex.axis=0.1)
par(cex.names=0.5)
barplot(rbind(HealthResult$death,HealthResult$injury),main="Events damage Population Health",col=c("blue","red"),names.arg=c(HealthResult$type),cex.names=0.5, beside = FALSE)
barplot(rbind(HealthResult$death,HealthResult$injury),main="Events damage Population Health",col=c("blue","red"),names.arg=c(HealthResult$type),cex.names=0.4, beside = FALSE)
options(rpubs.upload.method = "internal")
install.packages("dplyr",)
hist(mns,main="Sample Mean versus Theoretical Mean")
install.packages(knitr)
install.packages("knitr")
library("knitr")
file.edit('~/.Rprofile')
file.edit('~/.Rprofile')
source('~/.active-rstudio-document', echo=TRUE)
#The distribution of 1000 averages of 40 random uniforms
mns = NULL
for (i in 1:1000){
mns = c(mns, mean(rexp(40,0.2)))}
hist(mns,main="Sample Mean versus Theoretical Mean")
mean(mns)
#The theretical mean of the distribution is 1/lambda = 1/0.2 = 5
abline(v=mean(mns),col="red")
abline(v=5,col="blue")
legend("topright",c("Theoretic Mean","Sample Mean"), col=c("blue","red"), lwd=c(1,1),lty =c(1,1),cex=0.5)
#The distribution of 1000 variance of 40 random uniforms
var = NULL
for (i in 1:1000){
var = c(var, var(rexp(40,0.2)))
}
hist(var,main="Sample Variance versus Theoretical Variance")
mean(var)
#The theretical sd of the distribution is 1/lambda = (1/0.2)^2 = 25
abline(v=mean(var),col="red")
abline(v=25,col="blue")
legend("topright",c("Theoretic Variance","Sample Variance"), col=c("blue","red"), lwd=c(1,1),lty =c(1,1),cex=0.5)
hist(mns,main="Sample Mean versus Theoretical Mean")
print((paste0"Theoretic Value = ",25)
print((paste0("Theoretic Value = ",25))
print((paste0("Theoretic Value = ",25)))
print((paste0("Theoretic Value = ",25)))
mean(var)
hist(mns,main="Sample Mean versus Theoretical Mean")
lines(density(mns))
lines(density(mns))
density(mns)
lines(density(mns))
hist(mns,main="Sample Mean versus Theoretical Mean",xlab="sample Means from 1000 simulations")
lines(density(mns))
print((paste0("Theoretic Value = ",25)))
print(paste0("Simulated mean(var)
#abline(v=mean(var),col="red")
#abline(v=25,col="blue")
#legend("topright",c("Theoretic Variance","Sample Variance"), col=c("blue","red"), lwd=c(1,1),lty =c(1,1),cex=0.5)
#The distribution of 1000 averages of 40 random uniforms
mns = NULL
for (i in 1:1000){
mns = c(mns, mean(rexp(40,0.2)))}
hist(mns,main="Sample Mean versus Theoretical Mean")
mean(mns)
#The theretical mean of the distribution is 1/lambda = 1/0.2 = 5
abline(v=mean(mns),col="red")
abline(v=5,col="blue")
legend("topright",c("Theoretic Mean","Sample Mean"), col=c("blue","red"), lwd=c(1,1),lty =c(1,1),cex=0.5)
var = NULL
for (i in 1:1000){
var = c(var, var(rexp(40,0.2)))
}
#hist(var,main="Sample Variance versus Theoretical Variance")
#The theretical sd of the distribution is 1/lambda = (1/0.2)^2 = 25
print((paste0("Theoretic Value = ",25)))
print(paste0("Simulated mean(var)
#abline(v=mean(var),col="red")
#abline(v=25,col="blue")
#legend("topright",c("Theoretic Variance","Sample Variance"), col=c("blue","red"), lwd=c(1,1),lty =c(1,1),cex=0.5)
print((paste0("Theoretic Value = ",25)))
print(paste0("Simulated mean(var)
print(paste0("Simulated mean(var))
print(paste0("Simulated mean(var)",mean(var)))
print(paste0("Simulated mean(var) = ",mean(var)))
hist(mns,main="Sample Mean versus Theoretical Mean")
lines(density(mns),add=TRUE)
lines(density(mns))
lines(density(mns))
hist(mns,main="Sample Mean versus Theoretical Mean")
hist(mns,main="Sample Mean versus Theoretical Mean")
lines(density(mns))
lines(as.numeric(density(mns))
lines(as.numeric(density(mns)))
lines(as.numeric(density(mns)))
plot(mns,add=TRUE)
plot(densit(mns))
plot(density(mns))
plot(density(mns),add=TRUE)
?plot
par(new=FALSE)
plot(density(mns))
hist(mns,main="Sample Mean versus Theoretical Mean")
par(new=FALSE)
plot(density(mns))
hist(mns,main="Sample Mean versus Theoretical Mean")
par(new=TRUE)
plot(density(mns))
hist(mns,main="Sample Mean versus Theoretical Mean")
par(new=TRUE)
line(density(mns))
plot(density(mns))
hist(mns,main="Sample Mean versus Theoretical Mean")
plot(density(mns))
hist(mns,main="Sample Mean versus Theoretical Mean",fill="red")
hist(mns,main="Sample Mean versus Theoretical Mean",col="red")
#The distribution of 1000 variance of 40 random uniforms
var = NULL
for (i in 1:1000){
var = c(var, var(rexp(40,0.2)))
}
#hist(var,main="Sample Variance versus Theoretical Variance")
#The theretical sd of the distribution is 1/lambda = (1/0.2)^2 = 25
print((paste0("Theoretic Value = ",25)))
print(paste0("Simulated mean(var) = ",mean(var)))
#abline(v=mean(var),col="red")
#abline(v=25,col="blue")
#legend("topright",c("Theoretic Variance","Sample Variance"), col=c("blue","red"), lwd=c(1,1),lty =c(1,1),cex=0.5)
hist(mns,main="Sample Mean versus Theoretical Mean")
plot(density(mns))
#The distribution of 1000 averages of 40 random uniforms
mns = NULL
for (i in 1:1000){
mns = c(mns, mean(rexp(40,0.2)))}
hist(mns,main="Sample Mean versus Theoretical Mean",col="red")
mean(mns)
#The theretical mean of the distribution is 1/lambda = 1/0.2 = 5
abline(v=mean(mns),col="red")
abline(v=5,col="blue")
legend("topright",c("Theoretic Mean","Sample Mean"), col=c("blue","red"), lwd=c(1,1),lty =c(1,1),cex=0.5)
#The distribution of 1000 averages of 40 random uniforms
mns = NULL
for (i in 1:1000){
mns = c(mns, mean(rexp(40,0.2)))}
hist(mns,main="Sample Mean versus Theoretical Mean")
mean(mns)
#The theretical mean of the distribution is 1/lambda = 1/0.2 = 5
abline(v=mean(mns),col="red")
abline(v=5,col="blue")
legend("topright",c("Theoretic Mean","Sample Mean"), col=c("blue","red"), lwd=c(1,1),lty =c(1,1),cex=0.5)
#The distribution of 1000 variance of 40 random uniforms
var = NULL
for (i in 1:1000){
var = c(var, var(rexp(40,0.2)))
}
#hist(var,main="Sample Variance versus Theoretical Variance")
#The theretical sd of the distribution is 1/lambda = (1/0.2)^2 = 25
print((paste0("Theoretic Value = ",25)))
print(paste0("Simulated mean(var) = ",mean(var)))
#abline(v=mean(var),col="red")
#abline(v=25,col="blue")
#legend("topright",c("Theoretic Variance","Sample Variance"), col=c("blue","red"), lwd=c(1,1),lty =c(1,1),cex=0.5)
#The distribution of 1000 variance of 40 random uniforms
var = NULL
for (i in 1:1000){
var = c(var, var(rexp(40,0.2)))
}
#hist(var,main="Sample Variance versus Theoretical Variance")
#The theretical sd of the distribution is 1/lambda = (1/0.2)^2 = 25
print((paste0("Theoretic Value = ",25)))
print(paste0("Simulated mean(var) = ",mean(var)))
#abline(v=mean(var),col="red")
#abline(v=25,col="blue")
#legend("topright",c("Theoretic Variance","Sample Variance"), col=c("blue","red"), lwd=c(1,1),lty =c(1,1),cex=0.5)
hist(mns,main="Sample Mean versus Theoretical Mean",probability=T)
lines(density(mns)),col='blue') # actual distribution
lines(density(mns),col='blue') # actual distribution
lines(density(mns),col='red') # actual distribution
?dnorm
lines(dnorm(x,5,5),2,8, col='blue',add=T)
lines(dnorm(1000,5,5),2,8, col='blue',add=T)
lines(dnorm(5,5),2,8, col='blue',add=T)
curve(dnorm(norm(1000),5,5))
curve(dnorm(norm(1000)))
lines(dnorm(norm(1000)))
x=norm(1000,5,5)
line(dnorm(x))
x=norm(1000,5,5)
x=rnorm(1000,5,5)
line(dnorm(x))
lines(dnorm(x))
x=rnorm(1000,5,5)
lines(dnorm(x))
x=rnorm(1000*40,5,5)
lines(dnorm(x))
hist(mns,main="Sample Mean versus Theoretical Mean",probability=T)
lines(density(mns),col='red') # actual distribution
x=rnorm(400000,5,5)
lines(dnorm(x))
curve(dnorm(x,5,5))
lines(dnorm(x,5,5))
rm(x)
lines(dnorm(x,5,5))
curve(dnorm(x,5,5))
curve(dnorm(x,5,5))
set.seed(123456789);
l<-0.2        # lambda
n<-40         # number of exponentials
s<-1000       # number of simulations
# initialize a data frame with a row count of the number of simulations
df<-data.frame(mean=numeric(s))
# iterate 1 to the number of simulations variable
for (i in 1:s) {
ss<-rexp(n,l)     # simulation set of n exponential with l lambda
df[i,1]<-mean(ss) # mean of simulation set
}
# calculate the means
tm<-1/l             # theoretical mean
am<-mean(df$mean)   # actual mean
par(mfrow=c(1,1))
hist(scale(df$mean),probability=T,main='',ylim=c(0,0.5),xlab='')
curve(dnorm(x,0,1),-3,3, col='red',add=T) # normal distribution
lines(density(scale(df$mean)),col='blue') # actual distribution
legend(2,0.4,c('Normal','Actual'),cex=0.8,col=c('red','blue'),lty=1)
curve(dnorm(x,0,1),-3,3, col='red',add=T)
df
mns=data.frame(mns)
View(mns)
hist(mns,main="Sample Mean versus Theoretical Mean",probability=T)
lines(density(mns),col='red') # actual distribution
hist(mns,main="Sample Mean versus Theoretical Mean",probability=T)
mns=data.frame(as.numeric(mns)
hist(mns,main="Sample Mean versus Theoretical Mean",probability=T)
mns=data.frame(as.numeric(mns))
mns=data.frame(mns)
mns=as.numerci(mns)
mns=as.numeric(mns)
mns = data.frame(matrix(NA,1000,1))
for (i in 1:1000){
mns[i] = mean(rexp(40,0.2)))}
hist(mns,main="Sample Mean versus Theoretical Mean")
mns = data.frame(matrix(NA,1000,1))
for (i in 1:1000){
mns[i] = mean(rexp(40,0.2)))
mns[i] = mean(rexp(40,0.2))
for (i in 1:1000){
mns[i] = mean(rexp(40,0.2))
}
hist(mns,main="Sample Mean versus Theoretical Mean")
mns = data.frame(matrix(NA,1000,1))
mns[i,1] = mean(rexp(40,0.2))
for (i in 1:1000){
mns[i,1] = mean(rexp(40,0.2))
}
hist(mns,main="Sample Mean versus Theoretical Mean")
class(mns)
names(mns)="mean"
hist(mns$mean,main="Sample Mean versus Theoretical Mean")
mean(mns$mean)
abline(v=mean(mns),col="red")
abline(v=5,col="blue")
legend("topright",c("Theoretic Mean","Sample Mean"), col=c("blue","red"), lwd=c(1,1),lty =c(1,1),cex=0.5)
```
abline(v=mean(mns$mean),col="red")
abline(v=5,col="blue")
legend("topright",c("Theoretic Mean","Sample Mean"), col=c("blue","red"), lwd=c(1,1),lty =c(1,1),cex=0.5)
```
var = NULL
for (i in 1:1000){
var = c(var, var(rexp(40,0.2)))
}
#hist(var,main="Sample Variance versus Theoretical Variance")
#The theretical sd of the distribution is 1/lambda = (1/0.2)^2 = 25
print((paste0("Theoretic Value = ",25)))
print(paste0("Simulated mean(var) = ",mean(var)))
#abline(v=mean(var),col="red")
#abline(v=25,col="blue")
#legend("topright",c("Theoretic Variance","Sample Variance"), col=c("blue","red"), lwd=c(1,1),lty =c(1,1),cex=0.5)
```
**3. Show that the distribution is approximately normal.**
In point 3, focus on the difference between the distribution of a large collection of random exponentials and the distribution of a large collection of averages of 40 exponentials.
```{r}
mns=data.frame(mns)
mns=as.numeric(mns)
hist(mns,main="Sample Mean versus Theoretical Mean",probability=T)
lines(density(mns),col='red') # actual distribution
hist(mns$mean,main="Sample Mean versus Theoretical Mean",probability=T)
lines(density(mns$mean),col='red') # actual distribution
lines(dnorm(x,5,5))
curve(dnorm(x,0,1),-3,3, col='red',add=T) # normal distribution
curve(dnorm(x,0,1),-3,3, col='blue',add=T) # normal distribution
curve(dnorm(x,0,1),-3,3, col='blue',add=T) # normal distribution
curve(dnorm(x,5,5),3,8, col='blue',add=T) # normal distribution
x=seq(2,8,1000)
lines(dorm(x,5,5))
lines(dnorm(x,5,5))
lines(dnorm(x,5,200))
lines(dnorm(x,5,200))
lines(dnorm(x,5,5*sqrt(40)))
lines(dnorm(x,5,5*sqrt(40)),col="green")
lines(dnorm(x,5,5*sqrt(40)),col="yellow")
lines(dnorm(x,5,5*sqrt(40)),col="red")
lines(dnorm(x,5,5,col="red")
lines(dnorm(x,5,5,col="red"))
lines(dnorm(x,5,5),col="red")
lines(dnorm(x,5,5),col="green")
hist(mns$mean,main="Sample Mean versus Theoretical Mean",probability=T)
lines(density(mns$mean),col='red') # actual distribution
lines(dnorm(x,5,5))
curve(dnorm(x,5,5),3,8, col='blue',add=T) # normal distribution
lines(dnorm(x,mean=5,sd=5/sqrt(1000)), col='blue',add=T) # normal distribution
lines(dnorm(x,mean=5,sd=5/sqrt(1000)), col='blue',add=T) # normal distribution
lines(dnorm(x,mean=5,sd=5/sqrt(1000)), col='blue') # normal distribution
lines(dnorm(x,mean=5,sd=5/sqrt(1000)), col='blue') # normal distribution
lines(density(mns$mean),col='red') # actual distribution
hist(mns$mean,main="Sample Mean versus Theoretical Mean",probability=T)
hist(mns$mean,main="Sample Mean versus Theoretical Mean",probability=T)
lines(density(mns$mean),col='red') # actual distribution
lines(dnorm(x,mean=5,sd=5/sqrt(1000)), col='blue') # normal distribution
lines(dnorm(seq(3,8,1000),mean=5,sd=5/sqrt(1000)), col='blue') # normal distribution
lines(dnorm(seq(3,8,length=1000),mean=5,sd=5/sqrt(1000)), col='blue') # normal distribution
lines(dnorm(seq(3,8,length=1000),mean=5,sd=5*sqrt(1000)), col='blue') # normal distribution
hist(mns$mean,main="Sample Mean versus Theoretical Mean",probability=T)
lines(density(mns$mean),col='red') # actual distribution
lines(dnorm(seq(3,8,length=1000),mean=5,sd=5*sqrt(1000)), col='blue') # normal distribution
lines(dnorm(seq(3,8,length=1000),mean=5,sd=5*sqrt(40)), col='blue') # normal distribution
hist(mns$mean,main="Sample Mean versus Theoretical Mean",probability=T)
lines(density(mns$mean),col='red') # actual distribution
lines(dnorm(seq(3,8,length=1000),mean=5,sd=5*sqrt(40)), col='blue') # normal distribution
hist(mns$mean,main="Sample Mean versus Theoretical Mean",probability=T)
lines(density(mns$mean),col='red') # actual distribution
lines(dnorm(seq(3,8,length=1000),mean=5,sd=5/sqrt(40)), col='blue') # normal distribution
xfit <- seq(min(mns$mean), max(mns$mean), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
lines(xfit, yfit, pch=22, col="red", lty=1)
lambda=0.2
xfit <- seq(min(sim$mean), max(sim$mean), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
lines(xfit, yfit, pch=22, col="red", lty=1)
xfit <- seq(min(sim$mean), max(sim$mean), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
lines(xfit, yfit, pch=22, col="red", lty=1)
xfit <- seq(min(sim$mean), max(sim$mean), length=100)
xfit <- seq(min(mns$mean), max(mns$mean), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
lines(xfit, yfit, pch=22, col="red", lty=1)
hist(mns$mean,main="Sample Mean versus Theoretical Mean",probability=T)
lines(density(mns$mean),col='red') # actual distribution
lines(dnorm(seq(3,8,length=1000),mean=5,sd=5sqrt(40)), col='blue') # normal distribution
hist(mns$mean,  prob=T,
main="Figure 2
Distribution of Sample Means vs
Theoretical Density of Exponentials (lambda 0.2)",
xlab="Sample Means from 1000 Simulations")
# Density of the Simulated sample means
lines(density(mns$mean))
# Theoretical Mean - Red Line
abline(v=tm, col='red', lwd=1)
xfit <- seq(min(mns$mean), max(mns$mean), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
lines(xfit, yfit, pch=22, col="red", lty=1)
```
xfit <- seq(min(mns$mean), max(mns$mean), length=100)
hist(mns$mean,main="Sample Mean versus Theoretical Mean",probability=T)
lines(density(mns$mean),col='red') # actual distribution
xfit <- seq(min(mns$mean), max(mns$mean), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(40)))
lines(xfit, yfit, pch=22, col="red", lty=1)
xfit <- seq(min(mns$mean), max(mns$mean), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(40)))
lines(xfit, yfit, pch=22, col="blue", lty=1)
xfit <- seq(2, 8), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(40)))
lines(xfit, yfit, pch=22, col="blue", lty=1)
hist(mns$mean,main="Sample Mean versus Theoretical Mean",probability=T)
lines(density(mns$mean),col='red') # actual distribution
xfit <- seq(2, 8), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(40)))
lines(xfit, yfit, pch=22, col="blue", lty=1)
```
qqnorm(mns$mean,main="Q-Q plot")
qqline("mns$mean",col="red")
qqline("mns$mean",col="1")
qqline(mns$mean,col="red")
hist(mns$mean,main="Sample Mean versus Theoretical Mean",probability=T)
lines(density(mns$mean),col='red') # actual distribution
#standard distribution
xfit <- seq(2, 8), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(40)))
lines(xfit, yfit, pch=22, col="blue", lty=1)
#add legend
legend("topright",c("Theoretic Mean","Sample Mean"), col=c("blue","red"), lwd=c(1,1),lty =c(1,1),cex=0.5)
hist(mns$mean,main="Sample Mean versus Theoretical Mean",probability=T)
#The distribution of 1000 variance of 40 random uniforms
var = NULL
for (i in 1:1000){
var = c(var, var(rexp(40,0.2)))
}
hist(var,main="Sample Variance versus Theoretical Variance")
The theretical sd of the distribution is 1/lambda = (1/0.2)^2 = 25
print((paste0("Theoretic Value = ",25)))
print(paste0("Simulated mean(var) = ",mean(var)))
abline(v=mean(var),col="red")
abline(v=25,col="blue")
legend("topright",c("Theoretic Variance","Sample Variance"), col=c("blue","red"), lwd=c(1,1),lty =c(1,1),cex=0.5)
#The distribution of 1000 variance of 40 random uniforms
var = NULL
for (i in 1:1000){
var = c(var, var(rexp(40,0.2)))
}
hist(var,main="Sample Variance versus Theoretical Variance")
The theretical sd of the distribution is 1/lambda = (1/0.2)^2 = 25
print((paste0("Theoretic Value = ",25)))
print(paste0("Simulated mean(var) = ",mean(var)))
abline(v=mean(var),col="red")
abline(v=25,col="blue")
legend("topright",c("Theoretic Variance","Sample Variance"), col=c("blue","red"), lwd=c(1,1),lty =c(1,1),cex=0.5)
data(ToothGrowth)
library(datasets)
data(ToothGrowth)
library(datasets)
install.packages(datasets)
library(datasets)
data(ToothGrowth)
plot(ToothGrowth)
head(ToothGrowth)
View(ToothGrowth)
boxplot(len~supp*dose,data=ToothGrowth,xlab="Supp", ylab="Teeth Length", main="Tooth Growth Data")
z.half.alpha = qnorm(1-0.05/2)
c(-z.half.alpha,z.half.alpha)
z
?z.half
table(supp,dose)
table(ToothGrowth$supp,ToothGrowth$dose)
aggregate(len,list(supp,dose,mean))
list(supp,dose,mean)
list(ToothGrowth$supp,ToothGrowth$dose,mean)
table(list(ToothGrowth$supp,ToothGrowth$dose,mean))
summary(list(ToothGrowth$supp,ToothGrowth$dose,mean))
aggregate(len,list(ToothGrowth$supp,ToothGrowth$dose,mean))
aggregate(ToothGrowth,list(supp,dose,mean))
aggregate(ToothGrowth,list(supp,dose),FUN=mean)
aggregate(ToothGrowth,by=list(supp,dose),FUN=mean)
aggregate(ToothGrowth,by=list(ToothGrowth$supp,ToothGrowth$dose),FUN=mean)
View(ToothGrowth)
aggregate(ToothGrowth,by=list(supp,dose),FUN=mean)
aggregate(ToothGrowth$len,by=list(ToothGrowth$supp,ToothGrowth$dose),FUN=mean)
aggregate(ToothGrowth$len,by=list(ToothGrowth$supp,ToothGrowth$dose),FUN=mean)
aggregate(ToothGrowth$len,by=list(ToothGrowth$supp,ToothGrowth$dose),FUN=sd)
library("gplots",warn.conflicts=FALSE)
library(ggplot)
library(ggplot2)
library("gplots")
t.test(x$len[which(x$supp=="OJ")],x$len[which(x$supp=="VC")],paired=T)
t.test(ToothGrowth$len[which(x$supp=="OJ")],ToothGrowth$len[which(x$supp=="VC")],paired=T)
t.test(ToothGrowth$len[which(x$supp=="OJ")],ToothGrowth$len[which(x$supp=="VC")],paired=T)
t.test(ToothGrowth$len[which(ToothGrowth$supp=="OJ")],ToothGrowth$len[which(ToothGrowth$supp=="VC")],paired=T)
t.test(ToothGrowth$dose,ToothGrowth$len)
t.test(ToothGrowth$len[which(ToothGrowth$supp=="OJ")],ToothGrowth$len[which(ToothGrowth$supp=="VC")],paired=T)$p.value
t.test(ToothGrowth$dose,ToothGrowth$len)$p.value
t.test(ToothGrowth$dose[which(ToothGrowth$does==0.5)],ToothGrowth$len[which(ToothGrowth$does==1)])$p.value
ToothGrowth$dose[which(ToothGrowth$does==0.5)]
t.test(ToothGrowth$len[which(ToothGrowth$does==0.5)],ToothGrowth$len[which(ToothGrowth$does==1)])$p.value
ToothGrowth$len[which(ToothGrowth$does==0.5)]
ToothGrowth$len[which(ToothGrowth$does=="0.5")]
ToothGrowth$len
which(ToothGrowth$does==0.5)
t.test(ToothGrowth$len[which(ToothGrowth$dose==0.5)],ToothGrowth$len[which(ToothGrowth$dose==1)])$p.value
[which(ToothGrowth$dose==0.5)]
t.test(ToothGrowth$len[which(ToothGrowth$supp=="OJ")],ToothGrowth$len[which(ToothGrowth$supp=="VC")],paired=T)$p.value
t.test(ToothGrowth$len[which(ToothGrowth$dose==0.5)],ToothGrowth$len[which(ToothGrowth$dose==1)])$p.value
t.test(ToothGrowth$len[which(ToothGrowth$dose==1)],ToothGrowth$len[which(ToothGrowth$dose==2)])$p.value
t.test(ToothGrowth$len[which(ToothGrowth$dose==0.5)],ToothGrowth$len[which(ToothGrowth$dose==2)])$p.value
t.test(ToothGrowth$len[which(ToothGrowth$supp=="OJ")],ToothGrowth$len[which(ToothGrowth$supp=="VC")],paired=T)$p.value
summary(t.test(ToothGrowth$len[which(ToothGrowth$supp=="OJ")],ToothGrowth$len[which(ToothGrowth$supp=="VC")],paired=T))
t.test(ToothGrowth$len[which(ToothGrowth$supp=="OJ")],ToothGrowth$len[which(ToothGrowth$supp=="VC")],paired=T)$conf.int
t.test(ToothGrowth$len[which(ToothGrowth$supp=="OJ")],ToothGrowth$len[which(ToothGrowth$supp=="VC")],paired=T)$p.value
t.test(ToothGrowth$len[which(ToothGrowth$supp=="OJ")],ToothGrowth$len[which(ToothGrowth$supp=="VC")],paired=T)$conf.int
t.test(ToothGrowth$len[which(ToothGrowth$dose==0.5)],ToothGrowth$len[which(ToothGrowth$dose==1)])$p.value
t.test(ToothGrowth$len[which(ToothGrowth$dose==0.5)],ToothGrowth$len[which(ToothGrowth$dose==1)])$conf.int
t.test(ToothGrowth$len[which(ToothGrowth$dose==0.5)],ToothGrowth$len[which(ToothGrowth$dose==2)])$p.value
t.test(ToothGrowth$len[which(ToothGrowth$dose==0.5)],ToothGrowth$len[which(ToothGrowth$dose==2)])$conf.int
t.test(ToothGrowth$len[which(ToothGrowth$dose==1)],ToothGrowth$len[which(ToothGrowth$dose==2)])$p.value
t.test(ToothGrowth$len[which(ToothGrowth$dose==1)],ToothGrowth$len[which(ToothGrowth$dose==2)])$conf.int
```
install.packags("shiny")
install.packages("shiny")
library(shiny)
source('~/DS9/Project.R', echo=TRUE)
install.packages("shiny")
source('~/DS9/Project.R', echo=TRUE)
runApp()
runApp()
getwd()
setwd("C:/Users/Jianyi/Documents/DS7")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?numericInput
shiny::runApp()
